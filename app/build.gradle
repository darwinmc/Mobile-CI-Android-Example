apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testMockDebugUnitTest', 'createMockDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def javaClasses = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def kotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def javaSrc = "$project.projectDir/src/main/java"
    def kotlinSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([javaSrc, kotlinSrc])
    classDirectories = files([javaClasses, kotlinClasses])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testMockDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

task printVersionCode {
    doLast {
        println android.defaultConfig.versionCode
    }
}

task printVersionName {
    doLast {
        println android.defaultConfig.versionName
    }
}

static def countVersionCode() {
    def result = "git rev-list HEAD --count".execute().text.trim()
    return result.toInteger()
}

android {

    signingConfigs {
        release {
            storeFile file('../keys/keystore')
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias = System.getenv("KEYSTORE_ALIAS")
            keyPassword System.getenv("KEYSTORE_ALIAS_PASSWORD")
        }
    }
    compileSdkVersion 28

    defaultConfig {
        applicationId "hu.dpal.mobileci"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode countVersionCode()
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            testCoverageEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "data"

    productFlavors {
        mock {
            dimension "data"
            buildConfigField "String", "TYPE", '"MOCK"'
            buildConfigField "String", "BASE_URL", '"https://example.com"'
            applicationIdSuffix ".mock"
        }
        live {
            dimension "data"
            buildConfigField "String", "TYPE", '"LIVE"'
            buildConfigField "String", "BASE_URL", '"https://example.com"'
        }
    }

    compileOptions
    {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions 
    {
          abortOnError false
    }

}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0-rc01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // Kotlin KTX
    implementation "androidx.core:core-ktx:1.1.0"


    // Dagger
    kapt "com.google.dagger:dagger-compiler:2.25.2"
    implementation "com.google.dagger:dagger:2.25.2"

    // Rx
    implementation 'io.reactivex.rxjava2:rxjava:2.2.13'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // Network
    implementation "com.squareup.retrofit2:retrofit:2.6.2"
    implementation "com.squareup.retrofit2:converter-gson:2.6.2"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.6.2"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.2'

    // Analytics
    implementation 'com.google.firebase:firebase-analytics:17.2.1'

    // Unit test
    testImplementation 'junit:junit:4.12'

    // Instrumented test
    androidTestImplementation 'androidx.test:runner:1.3.0-alpha03'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha03'

    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.mauriciotogneri:greencoffee:3.5.0'
    implementation 'com.google.android.material:material:1.0.0'
    // Add missing dependencies for JDK 9+
    if (JavaVersion.current().ordinal() >= JavaVersion.VERSION_1_9.ordinal()) {
    // If you're using @AutoValue or any libs that requires javax.annotation (like Dagger)
    compileOnly 'com.github.pengrad:jdk9-deps:1.0'
    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'

    // If you're using Kotlin
    kapt "com.sun.xml.bind:jaxb-core:2.3.0.1"
    kapt "javax.xml.bind:jaxb-api:2.3.1"
    kapt "com.sun.xml.bind:jaxb-impl:2.3.2"

    // If you're using Java
    annotationProcessor "com.sun.xml.bind:jaxb-core:2.3.0.1"
    annotationProcessor "javax.xml.bind:jaxb-api:2.3.1"

    testAnnotationProcessor "com.sun.xml.bind:jaxb-core:2.3.0.1"
    testAnnotationProcessor "javax.xml.bind:jaxb-api:2.3.1"
  }
}
